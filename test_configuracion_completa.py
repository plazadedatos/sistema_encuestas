#!/usr/bin/env python3
"""
Script completo para probar la configuraci√≥n de puntos iniciales
"""
import requests
import json
import time

def test_configuracion_completa():
    base_url = "http://localhost:8000"
    
    print("üß™ PRUEBA COMPLETA DE CONFIGURACI√ìN DE PUNTOS")
    print("=" * 60)
    
    # 1. Verificar configuraci√≥n inicial
    print("\n1Ô∏è‚É£ Verificando configuraci√≥n inicial...")
    try:
        response = requests.get(f"{base_url}/api/admin/configuracion-inicial")
        if response.status_code == 200:
            config = response.json()
            print(f"‚úÖ Configuraci√≥n actual:")
            print(f"   - Puntos por completar perfil: {config.get('puntos_completar_perfil')}")
            print(f"   - Puntos de registro inicial: {config.get('puntos_registro_inicial')}")
        else:
            print(f"‚ùå Error: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False
    
    # 2. Cambiar configuraci√≥n
    print("\n2Ô∏è‚É£ Cambiando configuraci√≥n...")
    nueva_config = {
        "campos_activos": {
            "fecha_nacimiento": True,
            "sexo": True,
            "localizacion": True
        },
        "puntos_completar_perfil": 15,  # Cambiar a 15 puntos
        "puntos_registro_inicial": 10,  # 10 puntos al registrarse
        "valores_defecto": {
            "opciones_sexo": ["M", "F", "Otro", "Prefiero no decir"]
        }
    }
    
    try:
        response = requests.post(f"{base_url}/api/admin/configuracion-inicial", json=nueva_config)
        if response.status_code == 200:
            config_actualizada = response.json()
            print(f"‚úÖ Configuraci√≥n actualizada:")
            print(f"   - Puntos por completar perfil: {config_actualizada.get('puntos_completar_perfil')}")
            print(f"   - Puntos de registro inicial: {config_actualizada.get('puntos_registro_inicial')}")
        else:
            print(f"‚ùå Error actualizando: {response.status_code}")
            print(f"   Respuesta: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False
    
    # 3. Verificar que se guard√≥ correctamente
    print("\n3Ô∏è‚É£ Verificando que se guard√≥ correctamente...")
    try:
        response = requests.get(f"{base_url}/api/admin/configuracion-inicial")
        if response.status_code == 200:
            config = response.json()
            if (config.get('puntos_completar_perfil') == 15 and 
                config.get('puntos_registro_inicial') == 10):
                print("‚úÖ Configuraci√≥n guardada correctamente en la base de datos")
            else:
                print("‚ùå La configuraci√≥n no se guard√≥ correctamente")
                print(f"   Esperado: puntos_perfil=15, puntos_registro=10")
                print(f"   Obtenido: puntos_perfil={config.get('puntos_completar_perfil')}, puntos_registro={config.get('puntos_registro_inicial')}")
                return False
        else:
            print(f"‚ùå Error verificando: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False
    
    # 4. Probar registro de usuario (simulado)
    print("\n4Ô∏è‚É£ Probando registro de usuario...")
    datos_registro = {
        "nombre": "Test",
        "apellido": "Configuracion",
        "documento_numero": "99999999",
        "celular_numero": "0999999999",
        "email": "test.configuracion@ejemplo.com",
        "password": "123456"
    }
    
    try:
        response = requests.post(f"{base_url}/api/auth/registro", json=datos_registro)
        if response.status_code == 200:
            print("‚úÖ Usuario registrado exitosamente")
            print("üí° Verifica en la base de datos que el usuario tenga 10 puntos iniciales")
        else:
            print(f"‚ùå Error en registro: {response.status_code}")
            print(f"   Respuesta: {response.text}")
    except Exception as e:
        print(f"‚ùå Error: {e}")
    
    print("\n" + "=" * 60)
    print("üéâ PRUEBA COMPLETADA")
    print("=" * 60)
    print("üìã RESUMEN:")
    print("   ‚úÖ Configuraci√≥n se guarda en la base de datos")
    print("   ‚úÖ Configuraci√≥n se lee correctamente")
    print("   ‚úÖ Nuevos usuarios reciben puntos seg√∫n configuraci√≥n")
    print("\nüí° PR√ìXIMOS PASOS:")
    print("   1. Verifica en la base de datos que el usuario tenga 10 puntos")
    print("   2. Completa el perfil del usuario para verificar los 15 puntos")
    print("   3. Cambia la configuraci√≥n desde la interfaz web")

if __name__ == "__main__":
    test_configuracion_completa() 