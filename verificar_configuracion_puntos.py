#!/usr/bin/env python3
"""
Script para verificar la configuraci√≥n de puntos iniciales
"""
import requests
import json

def verificar_configuracion():
    base_url = "http://localhost:8000"
    
    print("üîç Verificando configuraci√≥n de puntos iniciales...")
    print("=" * 60)
    
    # 1. Verificar configuraci√≥n actual
    try:
        response = requests.get(f"{base_url}/api/admin/configuracion-inicial")
        if response.status_code == 200:
            config = response.json()
            print("‚úÖ Configuraci√≥n actual:")
            print(f"   - Puntos por completar perfil: {config.get('puntos_completar_perfil', 'No definido')}")
            print(f"   - Campos activos: {config.get('campos_activos', {})}")
        else:
            print(f"‚ùå Error obteniendo configuraci√≥n: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Error conectando al backend: {e}")
        return False
    
    # 2. Probar cambio de configuraci√≥n
    print("\nüß™ Probando cambio de configuraci√≥n...")
    nueva_config = {
        "campos_activos": {
            "fecha_nacimiento": True,
            "sexo": True,
            "localizacion": True
        },
        "puntos_completar_perfil": 10,  # Cambiar a 10 puntos
        "valores_defecto": {
            "opciones_sexo": ["M", "F", "Otro", "Prefiero no decir"]
        }
    }
    
    try:
        response = requests.post(f"{base_url}/api/admin/configuracion-inicial", json=nueva_config)
        if response.status_code == 200:
            print("‚úÖ Configuraci√≥n actualizada exitosamente")
            config_actualizada = response.json()
            print(f"   - Nuevos puntos: {config_actualizada.get('puntos_completar_perfil')}")
        else:
            print(f"‚ùå Error actualizando configuraci√≥n: {response.status_code}")
            print(f"   Respuesta: {response.text}")
    except Exception as e:
        print(f"‚ùå Error actualizando configuraci√≥n: {e}")
    
    # 3. Verificar configuraci√≥n despu√©s del cambio
    print("\nüîç Verificando configuraci√≥n despu√©s del cambio...")
    try:
        response = requests.get(f"{base_url}/api/admin/configuracion-inicial")
        if response.status_code == 200:
            config = response.json()
            print("‚úÖ Configuraci√≥n despu√©s del cambio:")
            print(f"   - Puntos por completar perfil: {config.get('puntos_completar_perfil', 'No definido')}")
        else:
            print(f"‚ùå Error obteniendo configuraci√≥n: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Error verificando configuraci√≥n: {e}")
    
    print("\n" + "=" * 60)
    print("üìã DIAGN√ìSTICO DEL PROBLEMA:")
    print("=" * 60)
    print("‚ùå PROBLEMA IDENTIFICADO:")
    print("   - La configuraci√≥n se 'guarda' pero no persiste en la base de datos")
    print("   - El endpoint siempre retorna la configuraci√≥n por defecto")
    print("   - No hay tabla de configuraci√≥n en la base de datos")
    print("   - Los puntos iniciales est√°n hardcodeados en el modelo Usuario")
    print("\nüîß SOLUCI√ìN NECESARIA:")
    print("   1. Crear tabla de configuraci√≥n en la base de datos")
    print("   2. Modificar el endpoint para guardar/leer de la BD")
    print("   3. Modificar el registro para usar la configuraci√≥n")
    print("   4. Agregar puntos iniciales al crear usuario")

if __name__ == "__main__":
    verificar_configuracion() 