#!/usr/bin/env python3
"""
Script detallado para probar el registro y identificar el problema
"""
import requests
import json
import time

def test_registro_detallado():
    base_url = "http://localhost:8000"
    
    print("üß™ PRUEBA DETALLADA DE REGISTRO")
    print("=" * 60)
    
    # 1. Verificar que el backend est√© funcionando
    print("\n1Ô∏è‚É£ Verificando backend...")
    try:
        response = requests.get(f"{base_url}/")
        if response.status_code == 200:
            print("‚úÖ Backend funcionando")
        else:
            print(f"‚ùå Backend respondi√≥: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå No se puede conectar al backend: {e}")
        return False
    
    # 2. Verificar endpoint de registro
    print("\n2Ô∏è‚É£ Verificando endpoint de registro...")
    try:
        # Probar con datos vac√≠os para ver si responde
        response = requests.post(f"{base_url}/api/auth/registro", json={})
        if response.status_code == 422:  # Error de validaci√≥n esperado
            print("‚úÖ Endpoint de registro accesible")
            print(f"   Respuesta: {response.json()}")
        else:
            print(f"‚ö†Ô∏è  Endpoint respondi√≥: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Error en endpoint: {e}")
        return False
    
    # 3. Probar registro con datos v√°lidos
    print("\n3Ô∏è‚É£ Probando registro con datos v√°lidos...")
    datos_registro = {
        "nombre": "Testo",
        "apellido": "Usuarioo",
        "documento_numero": "634234",
        "celular_numero": "0981234567",
        "email": "test.registro@ejemploo.com",
        "password": "123456"
    }
    
    print(f"üì§ Enviando datos: {json.dumps(datos_registro, indent=2)}")
    
    try:
        response = requests.post(f"{base_url}/api/auth/registro", json=datos_registro)
        print(f"üì• Status Code: {response.status_code}")
        print(f"üì• Headers: {dict(response.headers)}")
        
        if response.status_code == 200 or response.status_code == 201:
            print("‚úÖ Registro exitoso!")
            print(f"   Respuesta: {response.json()}")
        else:
            print(f"‚ùå Error en registro: {response.status_code}")
            print(f"   Respuesta: {response.text}")
            
    except Exception as e:
        print(f"‚ùå Error en petici√≥n: {e}")
        return False
    
    # 4. Probar registro con email duplicado
    print("\n4Ô∏è‚É£ Probando registro con email duplicado...")
    try:
        response = requests.post(f"{base_url}/api/auth/registro", json=datos_registro)
        if response.status_code == 400:
            print("‚úÖ Error de duplicado detectado correctamente")
            print(f"   Respuesta: {response.json()}")
        else:
            print(f"‚ö†Ô∏è  Respuesta inesperada: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Error: {e}")
    
    # 5. Verificar CORS
    print("\n5Ô∏è‚É£ Verificando CORS...")
    try:
        response = requests.options(f"{base_url}/api/auth/registro")
        print(f"‚úÖ CORS configurado - Status: {response.status_code}")
        print(f"   Headers CORS: {dict(response.headers)}")
    except Exception as e:
        print(f"‚ùå Error verificando CORS: {e}")
    
    print("\n" + "=" * 60)
    print("üìã DIAGN√ìSTICO:")
    print("=" * 60)
    print("Si el backend funciona correctamente aqu√≠, el problema est√° en el frontend.")
    print("\nüîç PR√ìXIMOS PASOS:")
    print("1. Ejecuta este script para verificar el backend")
    print("2. Si el backend funciona, revisa los logs del frontend")
    print("3. Verifica que el formulario est√© enviando los datos correctos")
    print("4. Revisa si hay errores de JavaScript en la consola del navegador")

if __name__ == "__main__":
    test_registro_detallado() 